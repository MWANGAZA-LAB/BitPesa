name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PNPM_VERSION: '8.10.0'

jobs:
  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    # environment: staging  # Comment out until environment is created
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Run type checking
        run: pnpm type-check

      - name: Run linting
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/api-gateway/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          
          # Apply Kubernetes configurations
          kubectl apply -f infrastructure/kubernetes/namespace.yaml
          kubectl apply -f infrastructure/kubernetes/secrets.yaml
          kubectl apply -f infrastructure/kubernetes/configmaps/environment-configs.yaml
          kubectl apply -f infrastructure/kubernetes/deployments/bitpesa-deployments.yaml
          kubectl apply -f infrastructure/kubernetes/services/bitpesa-services.yaml
          kubectl apply -f infrastructure/kubernetes/ingress/ingress-configs.yaml
          
          # Update ConfigMap for staging
          kubectl patch configmap bitpesa-config-staging -n bitpesa --patch '{"data":{"NODE_ENV":"staging"}}'
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/api-gateway -n bitpesa --timeout=300s
          kubectl rollout status deployment/mpesa-service -n bitpesa --timeout=300s
          kubectl rollout status deployment/transaction-service -n bitpesa --timeout=300s

      - name: Run health checks
        run: |
          echo "Running comprehensive health checks..."
          
          # Wait for all services to be ready
          kubectl wait --for=condition=ready pod -l app=api-gateway -n bitpesa --timeout=300s
          kubectl wait --for=condition=ready pod -l app=mpesa-service -n bitpesa --timeout=300s
          kubectl wait --for=condition=ready pod -l app=transaction-service -n bitpesa --timeout=300s
          kubectl wait --for=condition=ready pod -l app=monitoring-service -n bitpesa --timeout=300s
          
          # Test health endpoints
          kubectl exec deployment/api-gateway -n bitpesa -- curl -f http://localhost:3000/health
          kubectl exec deployment/mpesa-service -n bitpesa -- curl -f http://localhost:3002/health
          kubectl exec deployment/transaction-service -n bitpesa -- curl -f http://localhost:3003/health
          kubectl exec deployment/monitoring-service -n bitpesa -- curl -f http://localhost:3004/health
          
          # Test readiness endpoints
          kubectl exec deployment/api-gateway -n bitpesa -- curl -f http://localhost:3000/health/ready
          kubectl exec deployment/mpesa-service -n bitpesa -- curl -f http://localhost:3002/health/ready
          kubectl exec deployment/transaction-service -n bitpesa -- curl -f http://localhost:3003/health/ready
          kubectl exec deployment/monitoring-service -n bitpesa -- curl -f http://localhost:3004/health/ready
          
          echo "All health checks passed successfully!"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    # environment: production  # Comment out until environment is created
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Run type checking
        run: pnpm type-check

      - name: Run linting
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/api-gateway/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          
          # Run Prisma migrations for each service
          kubectl exec deployment/mpesa-service -n bitpesa -- pnpm prisma:migrate deploy
          kubectl exec deployment/transaction-service -n bitpesa -- pnpm prisma:migrate deploy
          kubectl exec deployment/monitoring-service -n bitpesa -- pnpm prisma:migrate deploy
          kubectl exec deployment/receipt-service -n bitpesa -- pnpm prisma:migrate deploy
          
          echo "Database migrations completed successfully"

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          
          # Apply Kubernetes configurations
          kubectl apply -f infrastructure/kubernetes/namespace.yaml
          kubectl apply -f infrastructure/kubernetes/secrets.yaml
          kubectl apply -f infrastructure/kubernetes/configmaps/environment-configs.yaml
          kubectl apply -f infrastructure/kubernetes/deployments/bitpesa-deployments.yaml
          kubectl apply -f infrastructure/kubernetes/services/bitpesa-services.yaml
          kubectl apply -f infrastructure/kubernetes/ingress/ingress-configs.yaml
          
          # Update ConfigMap for production
          kubectl patch configmap bitpesa-config-production -n bitpesa --patch '{"data":{"NODE_ENV":"production"}}'
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/api-gateway -n bitpesa --timeout=300s
          kubectl rollout status deployment/mpesa-service -n bitpesa --timeout=300s
          kubectl rollout status deployment/transaction-service -n bitpesa --timeout=300s

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add your health check commands here
          # Example: curl -f https://api.bitpesa.com/health

      # - name: Notify deployment success
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     channel: '#deployments'
      #     text: 'BitPesa Bridge deployed to production successfully! üöÄ'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # Add your rollback commands here
          # Example: kubectl rollout undo deployment/api-gateway

      # - name: Notify rollback
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     channel: '#deployments'
      #     text: 'BitPesa Bridge deployment failed and was rolled back! ‚ö†Ô∏è'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
