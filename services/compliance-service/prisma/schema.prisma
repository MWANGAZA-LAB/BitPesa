generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RiskLevel {
  MINIMAL
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplianceStatus {
  APPROVED
  MONITOR
  REQUIRES_REVIEW
  BLOCKED
  SUSPENDED
}

enum DocumentType {
  PASSPORT
  NATIONAL_ID
  DRIVERS_LICENSE
  UTILITY_BILL
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum VerificationLevel {
  BASIC
  ENHANCED
  DUE_DILIGENCE
}

enum EntityType {
  PERSON
  ORGANIZATION
  ADDRESS
}

enum ScreeningResult {
  CLEAR
  MATCH
  POTENTIAL_MATCH
  ERROR
}

enum ReportType {
  SUSPICIOUS_ACTIVITY
  LARGE_TRANSACTION
  CURRENCY_TRANSACTION
  MONTHLY_SUMMARY
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  ACCEPTED
  REJECTED
}

// AML Assessment model
model AMLAssessment {
  id                String            @id @default(uuid())
  transactionId     String            @unique
  riskLevel         RiskLevel
  riskScore         Float
  riskFactors       String[]
  complianceStatus  ComplianceStatus
  requiresReview    Boolean           @default(false)
  recommendedActions String[]
  reviewedBy        String?
  reviewedAt        DateTime?
  reviewNotes       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("aml_assessments")
  @@index([transactionId])
  @@index([riskLevel])
  @@index([complianceStatus])
  @@index([createdAt])
}

// KYC Document model
model KYCDocument {
  id              String        @id @default(uuid())
  userId          String
  documentType    DocumentType
  documentNumber  String
  issuingCountry  String
  expiryDate      DateTime?
  status          DocumentStatus @default(PENDING)
  verificationNotes String?
  verifiedBy      String?
  verifiedAt      DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("kyc_documents")
  @@index([userId])
  @@index([documentType])
  @@index([status])
}

// KYC Profile model
model KYCProfile {
  id               String            @id @default(uuid())
  userId           String            @unique
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  nationality      String
  address          Json
  phoneNumber      String
  email            String
  status           DocumentStatus    @default(PENDING)
  verificationLevel VerificationLevel @default(BASIC)
  riskRating       RiskLevel         @default(MINIMAL)
  documents        KYCDocument[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("kyc_profiles")
  @@index([userId])
  @@index([status])
  @@index([verificationLevel])
}

// Sanctions Screening model
model SanctionsScreening {
  id                String          @id @default(uuid())
  entityType        EntityType
  entityName        String
  entityId          String
  screeningResult   ScreeningResult
  matchScore        Float
  matchedLists      String[]
  screeningDate     DateTime        @default(now())
  nextScreeningDate DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("sanctions_screenings")
  @@index([entityType])
  @@index([entityId])
  @@index([screeningResult])
  @@index([screeningDate])
}

// Regulatory Reporting model
model RegulatoryReporting {
  id              String      @id @default(uuid())
  reportType      ReportType
  reportingPeriod Json
  status          ReportStatus @default(DRAFT)
  submittedAt     DateTime?
  acceptedAt      DateTime?
  rejectionReason String?
  reportData      Json
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("regulatory_reporting")
  @@index([reportType])
  @@index([status])
  @@index([submittedAt])
}

// Compliance Configuration model
model ComplianceConfig {
  id                    String  @id @default(uuid())
  amlThresholds         Json
  kycRequirements       Json
  reportingRequirements Json
  sanctionsScreening    Json
  isActive              Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("compliance_config")
}
